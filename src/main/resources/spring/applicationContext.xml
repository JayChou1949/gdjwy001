<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
  <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
        depends-on="lifecycleBeanPostProcessor" />
  <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    <property name="securityManager" ref="securityManager" />
  </bean>
  <context:annotation-config />
  <context:component-scan base-package="com.upd.hwcloud">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
  </context:component-scan>
  <!-- 开启aspectj代理 -->
  <aop:aspectj-autoproxy proxy-target-class="true" />
  <!-- 1. 引入数据库配置文件 -->
  <bean id="propertyConfigurer"
    class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:*.properties</value>
        <value>classpath:dev/*.properties</value>
        <value>classpath:beta/*.properties</value>
        <value>classpath:test/*.properties</value>
        <value>classpath:perPro/*.properties</value>
        <value>classpath:pro/*.properties</value>
      </list>
    </property>
    <property  name="fileEncoding" value="UTF-8"/>
  </bean>
  <!-- 2.数据库连接池 -->
  <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driverClassName}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>

    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="1" />
    <property name="minIdle" value="1" />
    <property name="maxActive" value="20" />

    <!-- 配置获取连接等待超时的时间 -->
    <property name="maxWait" value="60000" />

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <property name="timeBetweenEvictionRunsMillis" value="60000" />

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <property name="minEvictableIdleTimeMillis" value="300000" />

    <property name="validationQuery" value="SELECT 'x'" />
    <property name="testWhileIdle" value="true" />
    <property name="testOnBorrow" value="false" />
    <property name="testOnReturn" value="false" />

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <property name="poolPreparedStatements" value="true" />
    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
    <property name="filters" value="stat" />
  </bean>
  <bean id="logFilter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
    <property name="statementExecutableSqlLogEnable" value="false"/>
  </bean>
  <bean id="transactionManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>

  <!-- 4. 配置SqlSessionFactory对象 -->
  <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
    <!-- 注入数据库连接池 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!-- 扫描entity包 使用别名 -->
    <property name="typeAliasesPackage" value="com.upd.hwcloud.bean.entity.*"/>
    <!-- 扫描sql配置文件:mapper需要的xml文件 -->
    <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>

    <property name="globalConfig">
      <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <property name="refresh" value="true"/>
        <property name="dbConfig">
          <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig.DbConfig">
            <property name="dbType" value="ORACLE"/>
            <property name="idType" value="AUTO"/>
          </bean>
        </property>
        <property name="metaObjectHandler">
          <bean class="com.upd.hwcloud.common.MyMetaObjectHandler" />
        </property>
      </bean>
    </property>

    <property name="plugins">
      <array>
        <!-- 分页插件配置 -->
        <bean id="paginationInterceptor" class="com.baomidou.mybatisplus.extension.plugins.PaginationInterceptor" />
      </array>
    </property>
  </bean>

  <!-- 5. 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 注入sqlSessionFactory -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    <!-- 给出需要扫描Dao接口包 -->
    <property name="basePackage" value="com.upd.hwcloud.dao"/>
  </bean>

  <!-- 配置基于注解的声明式事务 -->
  <tx:annotation-driven />

  <!--消息中心服务类-->
  <bean id="producerService" class="com.dragonsoft.mq.client.spring.service.impl.ProducerServiceImpl" />

  <!-- 线程池配置 -->
  <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <!-- 核心线程数 -->
    <property name="corePoolSize" value="${task.core_pool_size}" />
    <!-- 最大线程数 -->
    <property name="maxPoolSize" value="${task.max_pool_size}" />
    <!-- 队列最大长度 -->
    <property name="queueCapacity" value="${task.queue_capacity}" />
    <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
    <property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
    <!-- 拒绝策略 -->
    <property name="rejectedExecutionHandler">
      <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
      <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
      <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
      <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
      <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
    </property>
  </bean>
  <!-- 注解式 -->
  <task:annotation-driven />

  <task:scheduler id="scheduler" pool-size="10"  />

</beans>